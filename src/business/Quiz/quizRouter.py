# ---------------------------------------------
# Program by @developer_telegrams
#
#
# Version   Date        Info
# 1.0       2023    Initial Version
#
# ---------------------------------------------
from typing import List, Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Request
from pydantic import BaseModel
from .QuizService import QuizService, QuizResultService
from src.business.Contact.telegram import send_text_telegram
from settings import CLICK_IN_TG
import aiohttp
import json

quizRouter = APIRouter(
    prefix="/quiz",
    tags=["quiz"]
)


class IQuiz(BaseModel):
    id: int
    title: str
    description: str
    data: dict


class IQuizResult(BaseModel):
    id: int
    quiz_id: int
    answers: dict
    created_at: str


@quizRouter.get('/all')
async def get_all():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω"""
    quizzes = await QuizService.get_active_quizzes()
    return [{"id": q.id, "title": q.title, "description": q.description} for q in quizzes]


class InQuiz(BaseModel):
    quiz_id: int


@quizRouter.post('/get')
async def get_quiz(data: InQuiz):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ ID"""
    quiz = await QuizService.get_by_filters(id=data.quiz_id)

    try:
        quiz = quiz[0]
    except:
        raise HTTPException(status_code=400, detail='–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    return quiz


class InQuizSubmit(BaseModel):
    quiz_id: int
    answers: dict


def split_message(msg: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ"""
    if len(msg) <= max_length:
        return [msg]

    parts = []
    current_part = ""
    lines = msg.split("%0A")

    for line in lines:
        if len(current_part) + len(line) + len("%0A") <= max_length:
            current_part += line + "%0A"
        else:
            if current_part:
                parts.append(current_part.rstrip("%0A"))
            current_part = line + "%0A"

    if current_part:
        parts.append(current_part.rstrip("%0A"))

    return parts


async def get_ip_info(ip: str) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ IP –∞–¥—Ä–µ—Å—É"""
    if not ip:
        return None

    if ip == "127.0.0.1":
        return None
        
    url = f"http://ip-api.com/json/{ip}?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("status") == "success":
                        return data
    except Exception as e:
        print(f"Error getting IP info: {e}")
    return None


@quizRouter.post("")
async def submit_quiz(request: Request, answers: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
    try:
        ip = answers['userInfo']['location']['ip']
    except:
        ip = ''

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ IP
    ip_info = await get_ip_info(ip)
    
    # –ü–æ–ª—É—á–∞–µ–º user-agent –∏ referer –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    useragent = request.headers.get("user-agent", "Unknown")
    referer = request.headers.get("referer", "Unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    service = QuizService()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = await service.add(
        answers=answers,
        useragent=useragent,
        referer=referer,
        ip=ip
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    msg = "üìù <b>–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</b>%0A%0A"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if "contact" in answers and "contactType" in answers:
        msg += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {answers['contact']} ({answers['contactType']})%0A%0A"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    msg += "üìã <b>–û—Ç–≤–µ—Ç—ã:</b>%0A"
    for answer in answers.get("answers", []):
        if isinstance(answer, dict):
            question = answer.get('questionText', '')
            answer_text = answer.get('answerText', '')
            if question and answer_text:
                msg += f"‚ùì <b>{question}</b>%0A"
                msg += f"üí° {answer_text}%0A%0A"
        else:
            msg += f"‚Ä¢ {answer}%0A"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    msg += "üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>%0A"
    msg += f"üåê IP: {ip}%0A"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ IP, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if ip_info:
        msg += "%0Aüìç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP:</b>%0A"
        msg += f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {ip_info.get('country', 'Unknown')} ({ip_info.get('countryCode', 'Unknown')})%0A"
        msg += f"‚Ä¢ –†–µ–≥–∏–æ–Ω: {ip_info.get('regionName', 'Unknown')}%0A"
        msg += f"‚Ä¢ –ì–æ—Ä–æ–¥: {ip_info.get('city', 'Unknown')}%0A"
        msg += f"‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ip_info.get('isp', 'Unknown')}%0A"
        msg += f"‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {ip_info.get('org', 'Unknown')}%0A"
        msg += f"‚Ä¢ AS: {ip_info.get('as', 'Unknown')}%0A"
        msg += f"‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {ip_info.get('timezone', 'Unknown')}%0A"
        msg += f"‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {ip_info.get('lat', 'Unknown')}, {ip_info.get('lon', 'Unknown')}%0A"
    
    msg += f"üîç Referer: {referer}%0A"
    msg += f"üñ• User Agent: {useragent}%0A"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ answers
    for key, value in answers.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—è –∏ —Å–ø–∏—Å–æ–∫ answers
        if key in ['answers', 'contact', 'contactType', 'useragent', 'referer', 'ip']:
            continue
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        formatted_key = key.replace('_', ' ').title()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if isinstance(value, dict):
            msg += f"%0Aüì± <b>{formatted_key}</b>%0A"
            for sub_key, sub_value in value.items():
                if isinstance(sub_value, dict):
                    msg += f"  üìå <b>{sub_key.replace('_', ' ').title()}</b>%0A"
                    for k, v in sub_value.items():
                        formatted_k = k.replace('_', ' ').title()
                        if isinstance(v, dict):
                            msg += f"    ‚Ä¢ <b>{formatted_k}:</b>%0A"
                            for k2, v2 in v.items():
                                formatted_k2 = k2.replace('_', ' ').title()
                                msg += f"      - {formatted_k2}: {v2}%0A"
                        else:
                            msg += f"    ‚Ä¢ {formatted_k}: {v}%0A"
                else:
                    formatted_sub_key = sub_key.replace('_', ' ').title()
                    msg += f"  ‚Ä¢ {formatted_sub_key}: {sub_value}%0A"
        else:
            msg += f"üîë {formatted_key}: {value}%0A"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if CLICK_IN_TG and useragent and 'bot' not in str(useragent).lower():
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        message_parts = split_message(msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        for i, part in enumerate(message_parts, 1):
            if len(message_parts) > 1:
                part = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(message_parts)}%0A%0A{part}"
            await send_text_telegram(part)
    
    return {"status": "success", "result": result}
